using Content.Shared._Harmony.ReadyManifest;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Harmony.ReadyManifest.UI;

[GenerateTypedNameReferences]
public sealed partial class ReadyManifestJobListing : GridContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public const string StyleClassReadyIndicatorNoReady = "ReadyIndicatorNoReady";
    public const string StyleClassReadyIndicatorLowReady = "ReadyIndicatorLowReady";
    public const string StyleClassReadyIndicatorMediumReady = "ReadyIndicatorMediumReady";
    public const string StyleClassReadyIndicatorHighReady = "ReadyIndicatorHighReady";

    public ReadyManifestJobListing(ProtoId<JobPrototype> jobId, ReadyManifestJobData? readyCount)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var spriteSystem = _entityManager.System<SpriteSystem>();

        if (!_prototypeManager.TryIndex(jobId, out var job))
            return;

        // Set the icon texture if it can be found, otherwise delete the icon control
        if (_prototypeManager.TryIndex(job.Icon, out var icon))
            JobIcon.Texture = spriteSystem.Frame0(icon.Icon);
        else
            JobDataHolder.RemoveChild(JobIcon);

        JobTitle.Text = Loc.GetString("ready-manifest-job-title", ("jobTitle", job.LocalizedName));

        if (readyCount == null)
        {
            ReadyIndicator.StyleClasses.Add(StyleClassReadyIndicatorNoReady);
            return;
        }

        string locId;
        int usedReadyCount;
        if (readyCount.Value.HighReadies > 0)
        {
            locId = "high";
            usedReadyCount = readyCount.Value.HighReadies;
            ReadyIndicator.StyleClasses.Add(StyleClassReadyIndicatorHighReady);
        }
        else if (readyCount.Value.MediumReadies > 0)
        {
            locId = "medium";
            usedReadyCount = readyCount.Value.MediumReadies;
            ReadyIndicator.StyleClasses.Add(StyleClassReadyIndicatorMediumReady);
        }
        else if (readyCount.Value.LowReadies > 0)
        {
            locId = "low";
            usedReadyCount = readyCount.Value.LowReadies;
            ReadyIndicator.StyleClasses.Add(StyleClassReadyIndicatorLowReady);
        }
        else
        {
            locId = "no";
            usedReadyCount = 0;
            ReadyIndicator.StyleClasses.Add(StyleClassReadyIndicatorNoReady);
        }

        ReadyCount.Text = Loc.GetString(
            $"ready-manifest-{locId}-ready-count",
            ("count", usedReadyCount));
        ReadyIndicator.Text = Loc.GetString($"ready-manifest-{locId}-ready-indicator");
    }
}
